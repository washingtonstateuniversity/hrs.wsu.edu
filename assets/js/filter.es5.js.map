{"version":3,"sources":["webpack:///./src/assets/js/filter.js"],"names":["input","document","getElementById","reset","sanitize","str","encodeURIComponent","replace","c","charCodeAt","toString","handleInputChange","td","i","filter","value","toUpperCase","tr","querySelector","getElementsByTagName","searchColumn","dataset","length","innerHTML","indexOf","style","display","handleResetSelect","_callee","params","filterValue","regeneratorRuntime","wrap","_context","prev","next","window","URLSearchParams","location","search","get","stop","this","initializeFilter","addEventListener","handleURLSearchParams"],"mappings":"gQAAA,IAAMA,EACLC,SAASC,eAAgB,sBAEpBC,EACLF,SAASC,eAAgB,wBAOpBE,EAAW,SAA4BC,GAC5C,OAAOC,mBAAoBD,GAAME,QAAS,WAAY,SAAEC,GACvD,MAAO,IAAMA,EAAEC,WAAY,GAAIC,SAAU,OAOrCC,EAAoB,WACzB,IAAIC,EAAIC,EACJC,EAASV,EAAUJ,EAAMe,MAAMC,eAE/BC,EADQhB,SAASiB,cAAe,oBACrBC,qBAAsB,MACjCC,EAAiBpB,EAAMqB,QAAQD,aAAepB,EAAMqB,QAAQD,aAAe,EAG/E,IAAMP,EAAI,EAAGA,EAAII,EAAGK,OAAQT,KAC3BD,EAAKK,EAAGJ,GAAGM,qBAAsB,MAAOC,EAAe,OAEhD,EAAIR,EAAGW,UAAUP,cAAcQ,QAASV,GAC7CG,EAAGJ,GAAGY,MAAMC,QAAU,GAEtBT,EAAGJ,GAAGY,MAAMC,QAAU,SASpBC,EAAoB,WACzB3B,EAAMe,MAAQ,GACdJ,mPAMD,SAAAiB,IAAA,IAAAC,EAAAC,EAAA,OAAAC,mBAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,YACM,oBAAqBC,QAD3B,CAAAH,EAAAE,KAAA,WAEQN,EAAS,IAAIQ,gBAAiBD,OAAOE,SAASC,QAG/C,QAFCT,EAAcD,EAAOW,IAAK,WAHlC,CAAAP,EAAAE,KAAA,eAMGnC,EAAMe,MAAQX,EAAU0B,GAN3BG,EAAAE,KAAA,EAOSxB,IAPT,wBAAAsB,EAAAQ,SAAAb,EAAAc,gCAee,SAASC,IACvB3C,EAAM4C,iBAAkB,QAASjC,GACjCR,EAAMyC,iBAAkB,QAASjB,sCACjCkB","file":"filter.es5.js","sourcesContent":["const input = /** @type {!Element} */ (\n\tdocument.getElementById( 'search_table_input' ) );\n\nconst reset = /** @type {!Element} */ (\n\tdocument.getElementById( 'js-search-form-reset' ) );\n\n/*\n * Sanitizes a given string as an encoded URI component.\n *\n * @type {!string} str A string to be encoded.\n */\nconst sanitize = function encodeParamString( str ) {\n\treturn encodeURIComponent( str ).replace( /[!'()*]/g, ( c ) => {\n\t\treturn '%' + c.charCodeAt( 0 ).toString( 16 );\n\t} );\n};\n\n/*\n * Hides all table elements not matching the search parameter.\n */\nconst handleInputChange = function updateTableDisplay() {\n\tlet td, i;\n\tlet filter = sanitize( input.value.toUpperCase() );\n\tlet table = document.querySelector( 'table.searchable' );\n\tlet tr = table.getElementsByTagName( 'tr' );\n\tlet searchColumn = ( input.dataset.searchColumn ? input.dataset.searchColumn : 1 );\n\n\t// Loop through all table rows and hide those that don't match the search.\n\tfor ( i = 0; i < tr.length; i++ ) {\n\t\ttd = tr[i].getElementsByTagName( 'td' )[searchColumn - 1];\n\t\tif ( td ) {\n\t\t\tif ( -1 < td.innerHTML.toUpperCase().indexOf( filter ) ) {\n\t\t\t\ttr[i].style.display = '';\n\t\t\t} else {\n\t\t\t\ttr[i].style.display = 'none';\n\t\t\t}\n\t\t}\n\t}\n};\n\n/*\n * Clears the input field and resets the filtered output.\n */\nconst handleResetSelect = function resetFilter() {\n\tinput.value = '';\n\thandleInputChange();\n};\n\n/*\n * Updates filter results based on a URL parameter.\n */\nasync function handleURLSearchParams() {\n\tif ( 'URLSearchParams' in window ) {\n\t\tconst params = new URLSearchParams( window.location.search );\n\t\tconst filterValue = params.get( 'filter' );\n\n\t\tif ( null !== filterValue ) {\n\t\t\tinput.value = sanitize( filterValue );\n\t\t\tawait handleInputChange();\n\t\t}\n\t}\n}\n\n/**\n * Adds event handlers and URL parameter check.\n */\nexport default function initializeFilter() {\n\tinput.addEventListener( 'keyup', handleInputChange );\n\treset.addEventListener( 'click', handleResetSelect );\n\thandleURLSearchParams();\n};\n"],"sourceRoot":""}