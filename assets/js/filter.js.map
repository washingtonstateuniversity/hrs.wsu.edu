{"version":3,"sources":["webpack:///./src/js/filter.js"],"names":["__webpack_require__","r","__webpack_exports__","d","initializeFilter","input","document","getElementById","reset","sanitize","str","encodeURIComponent","replace","c","charCodeAt","toString","handleInputChange","filter","value","toUpperCase","tr","querySelector","getElementsByTagName","searchColumn","dataset","td","i","length","innerHTML","indexOf","style","display","handleResetSelect","addEventListener","async","window","filterValue","URLSearchParams","location","search","get","handleURLSearchParams"],"mappings":"wFAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAA,MAAMC,EACLC,SAASC,eAAgB,sBAEpBC,EACLF,SAASC,eAAgB,wBAOpBE,EAAW,SAA4BC,GAC5C,OAAOC,mBAAoBD,GAAME,QAAS,WAAcC,GAChD,IAAMA,EAAEC,WAAY,GAAIC,SAAU,MAOrCC,EAAoB,WACzB,MAAMC,EAASR,EAAUJ,EAAMa,MAAMC,eAE/BC,EADQd,SAASe,cAAe,oBACrBC,qBAAsB,MACjCC,EAAiBlB,EAAMmB,QAAQD,aAAelB,EAAMmB,QAAQD,aAAe,EACjF,IAAIE,EAAIC,EAGR,IAAMA,EAAI,EAAGA,EAAIN,EAAGO,OAAQD,KAC3BD,EAAKL,EAAIM,GAAIJ,qBAAsB,MAAQC,EAAe,OAEnD,EAAIE,EAAGG,UAAUT,cAAcU,QAASZ,GAC7CG,EAAIM,GAAII,MAAMC,QAAU,GAExBX,EAAIM,GAAII,MAAMC,QAAU,SAStBC,EAAoB,WACzB3B,EAAMa,MAAQ,GACdF,KAqBc,SAASZ,IACvBC,EAAM4B,iBAAkB,QAASjB,GACjCR,EAAMyB,iBAAkB,QAASD,GAjBlCE,iBACC,GAAK,oBAAqBC,OAAS,CAClC,MACMC,EADS,IAAIC,gBAAiBF,OAAOG,SAASC,QACzBC,IAAK,UAE3B,OAASJ,IACb/B,EAAMa,MAAQT,EAAU2B,SAClBpB,MAWRyB","file":"filter.js","sourcesContent":["const input = /** @type {!Element} */ (\n\tdocument.getElementById( 'search_table_input' ) );\n\nconst reset = /** @type {!Element} */ (\n\tdocument.getElementById( 'js-search-form-reset' ) );\n\n/*\n * Sanitizes a given string as an encoded URI component.\n *\n * @type {!string} str A string to be encoded.\n */\nconst sanitize = function encodeParamString( str ) {\n\treturn encodeURIComponent( str ).replace( /[!'()*]/g, ( c ) => {\n\t\treturn '%' + c.charCodeAt( 0 ).toString( 16 );\n\t} );\n};\n\n/*\n * Hides all table elements not matching the search parameter.\n */\nconst handleInputChange = function updateTableDisplay() {\n\tconst filter = sanitize( input.value.toUpperCase() );\n\tconst table = document.querySelector( 'table.searchable' );\n\tconst tr = table.getElementsByTagName( 'tr' );\n\tconst searchColumn = ( input.dataset.searchColumn ? input.dataset.searchColumn : 1 );\n\tlet td, i;\n\n\t// Loop through all table rows and hide those that don't match the search.\n\tfor ( i = 0; i < tr.length; i++ ) {\n\t\ttd = tr[ i ].getElementsByTagName( 'td' )[ searchColumn - 1 ];\n\t\tif ( td ) {\n\t\t\tif ( -1 < td.innerHTML.toUpperCase().indexOf( filter ) ) {\n\t\t\t\ttr[ i ].style.display = '';\n\t\t\t} else {\n\t\t\t\ttr[ i ].style.display = 'none';\n\t\t\t}\n\t\t}\n\t}\n};\n\n/*\n * Clears the input field and resets the filtered output.\n */\nconst handleResetSelect = function resetFilter() {\n\tinput.value = '';\n\thandleInputChange();\n};\n\n/*\n * Updates filter results based on a URL parameter.\n */\nasync function handleURLSearchParams() {\n\tif ( 'URLSearchParams' in window ) {\n\t\tconst params = new URLSearchParams( window.location.search );\n\t\tconst filterValue = params.get( 'filter' );\n\n\t\tif ( null !== filterValue ) {\n\t\t\tinput.value = sanitize( filterValue );\n\t\t\tawait handleInputChange();\n\t\t}\n\t}\n}\n\n/**\n * Adds event handlers and URL parameter check.\n */\nexport default function initializeFilter() {\n\tinput.addEventListener( 'keyup', handleInputChange );\n\treset.addEventListener( 'click', handleResetSelect );\n\thandleURLSearchParams();\n}\n"],"sourceRoot":""}