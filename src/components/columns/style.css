.wp-block-columns {
	align-items: initial !important;
	box-sizing: border-box;
	display: flex;
	flex-wrap: wrap !important;
	margin-bottom: 1.5em;

	&.has-text-color {
		color: var(--wp--custom--wsu-color-black--90) !important;
	}

	&:where(.has-background) {
		border-top: 3px solid;
		border-bottom: 3px solid;
		padding: 2rem 1rem;
	}

	&.has-primary-crimson-background-color {
		background-color: transparent !important;
		border-color: var(--wp--preset--color--primary-crimson);
	}

	&.has-primary-gray-background-color {
		background-color: transparent !important;
		border-color: var(--wp--preset--color--primary-gray);
	}

	&.has-secondary-crimson-background-color {
		background-color: transparent !important;
		border-color: var(--wp--preset--color--secondary-crimson);
	}

	&.has-dark-background-color {
		background-color: transparent !important;
		border-color: var(--wp--preset--color--dark);
	}

	&.has-light-background-color {
		background-color: transparent !important;
		border-color: var(--wp--preset--color--light);
	}

	&.are-vertically-aligned-top {
		align-items: flex-start;
	}

	&.are-vertically-aligned-center {
		align-items: center;
	}

	&.are-vertically-aligned-bottom {
		align-items: flex-end;
	}

	&.is-not-stacked-on-mobile {
		flex-wrap: nowrap !important;

		& > .wp-block-column {
			flex-basis: 0;
			flex-grow: 1;

			&[style*="flex-basis"] {
				flex-grow: 0;
			}
		}
	}
}

.wp-block-column {
	flex-grow: 1;
	min-width: 0;
	word-break: break-word;
	overflow-wrap: break-word;

	&.has-text-color {
		color: var(--wp--custom--wsu-color-black--90) !important;
	}

	&:where(.has-background) {
		border-top: 3px solid;
		border-bottom: 3px solid;
		padding: 2rem 1rem;
	}

	&.has-primary-crimson-background-color {
		background-color: transparent !important;
		border-color: var(--wp--preset--color--primary-crimson);
	}

	&.has-primary-gray-background-color {
		background-color: transparent !important;
		border-color: var(--wp--preset--color--primary-gray);
	}

	&.has-secondary-crimson-background-color {
		background-color: transparent !important;
		border-color: var(--wp--preset--color--secondary-crimson);
	}

	&.has-dark-background-color {
		background-color: transparent !important;
		border-color: var(--wp--preset--color--dark);
	}

	&.has-light-background-color {
		background-color: transparent !important;
		border-color: var(--wp--preset--color--light);
	}

	&.is-vertically-aligned-top {
		align-self: flex-start;
	}

	&.is-vertically-aligned-center {
		align-self: center;
	}

	&.is-vertically-aligned-bottom {
		align-self: flex-end;
	}

	&.is-vertically-aligned-top,
	&.is-vertically-aligned-center,
	&.is-vertically-aligned-bottom {
		width: 100%;
	}
}

@media (max-width: 576px) {

	/* Need to override inline styles */
	.wp-block-columns:not(.is-not-stacked-on-mobile) > .wp-block-column {
		flex-basis: 100% !important;
	}

}

@media (min-width: 576px) and (max-width: 900px) {

	/* Need to override WordPress's aggressive inline styles */
	.wp-block-columns:not(.is-not-stacked-on-mobile) > .wp-block-column {
		flex-basis: calc(50% - 2rem) !important;
	}

}

@media (min-width: 900px) {

	.wp-block-columns {
		flex-wrap: nowrap !important;
	}

	/* Available space should be divided equally amongst columns without an
	assigned width. This is achieved by assigning a flex basis that is
	consistent (equal), would not cause the sum total of column widths to
	exceed 100%, and which would cede to a column with an assigned width.
	The `flex-grow` allows columns to maximally and equally occupy space
	remaining after subtracting the space occupied by columns with
	explicit widths (if any exist). */
	.wp-block-columns:not(.is-not-stacked-on-mobile) > .wp-block-column {
		flex-basis: 0;
		flex-grow: 1;
		margin-top: 0;

		&[style*="flex-basis"] {
			flex-grow: 0;
		}
	}

}

/**
 * Classic columns
 *
 * @deprecated 2.0.0
 */

@media only screen and (min-width: 640px) {

	.gform_wrapper .gfield_error.hrs-two-col {
		width: 47%;
	}

}
